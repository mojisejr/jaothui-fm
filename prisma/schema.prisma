// Prisma Schema for Farm Management System
// Database: Supabase (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profile information (extends Clerk auth)
model Profile {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId  String   @unique @map("clerk_user_id")
  phoneNumber  String   @unique @map("phone_number")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  ownedFarms         Farm[]         @relation("FarmOwner")
  farmMemberships    FarmMember[]
  createdActivities  Activity[]     @relation("ActivityCreator")
  completedActivities Activity[]    @relation("ActivityCompleter")
  notifications      Notification[]
  pushSubscriptions  PushSubscription[]

  @@map("profiles")
}

// Farm information
model Farm {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId   String   @map("owner_id") @db.Uuid
  farmName  String   @default("ฟาร์มของฉัน") @map("farm_name")
  province  String   @default("ไม่ระบุ")
  farmCode  String?  @unique @map("farm_code")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  owner           Profile        @relation("FarmOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         FarmMember[]
  animals         Animal[]
  activities      Activity[]
  activityReminders ActivityReminder[]
  notifications   Notification[]

  @@map("farms")
}

// Farm membership (owner + future member invitations)
model FarmMember {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  farmId           String    @map("farm_id") @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  role             Role
  invitationStatus InvitationStatus @default(ACTIVE) @map("invitation_status")
  invitedBy        String?   @map("invited_by") @db.Uuid
  invitedAt        DateTime? @map("invited_at") @db.Timestamptz(6)
  respondedAt      DateTime? @map("responded_at") @db.Timestamptz(6)
  joinedAt         DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)

  // Relations
  farm    Farm    @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, role])
  @@map("farm_members")
}

// Animal information (all types in one table)
model Animal {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  farmId     String      @map("farm_id") @db.Uuid
  animalId   String      @map("animal_id") // User-defined or auto-generated
  animalType AnimalType  @map("animal_type")
  name       String
  sex        Sex?
  birthDate  DateTime?   @map("birth_date") @db.Date
  color      String?
  weightKg   Int?        @map("weight_kg") // Weight in kilograms (integer)
  heightCm   Int?        @map("height_cm") // Height in centimeters (integer)
  motherName String?     @map("mother_name") // Parent name (not linked)
  fatherName String?     @map("father_name") // Parent name (not linked)
  imageUrl   String?     @map("image_url")
  status     AnimalStatus @default(ACTIVE)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  farm       Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)
  activities Activity[]

  // Constraints
  @@unique([farmId, animalId])
  @@map("animals")
}

// Activity/Task information
model Activity {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  animalId     String         @map("animal_id") @db.Uuid
  farmId       String         @map("farm_id") @db.Uuid
  createdBy    String         @map("created_by") @db.Uuid
  title        String
  description  String?
  activityDate DateTime       @map("activity_date") @db.Date
  reminderDate DateTime?      @map("reminder_date") @db.Date // Optional reminder
  status       ActivityStatus @default(PENDING)
  completedAt  DateTime?      @map("completed_at") @db.Timestamptz(6)
  completedBy  String?        @map("completed_by") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  animal            Animal             @relation(fields: [animalId], references: [id], onDelete: Cascade)
  farm              Farm               @relation(fields: [farmId], references: [id], onDelete: Cascade)
  creator           Profile            @relation("ActivityCreator", fields: [createdBy], references: [id])
  completer         Profile?           @relation("ActivityCompleter", fields: [completedBy], references: [id])
  activityReminders ActivityReminder[]
  notifications     Notification[]

  @@map("activities")
}

// Reminder system (created automatically when activity has reminder_date)
model ActivityReminder {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityId       String    @map("activity_id") @db.Uuid
  farmId           String    @map("farm_id") @db.Uuid
  reminderDate     DateTime  @map("reminder_date") @db.Date
  reminderTime     DateTime  @default(dbgenerated("'06:00:00'::time")) @map("reminder_time") @db.Time(6)
  notificationSent Boolean   @default(false) @map("notification_sent")
  sentAt           DateTime? @map("sent_at") @db.Timestamptz(6)
  isRecurring      Boolean   @default(false) @map("is_recurring")
  recurrencePattern String? @map("recurrence_pattern") // 'daily', 'weekly', 'monthly'
  nextReminderDate DateTime? @map("next_reminder_date") @db.Date
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  farm     Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@map("activity_reminders")
}

// Notification history
model Notification {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String           @map("user_id") @db.Uuid
  farmId           String           @map("farm_id") @db.Uuid
  activityId       String?          @map("activity_id") @db.Uuid
  notificationType NotificationType @map("notification_type")
  title            String
  message          String
  isRead           Boolean          @default(false) @map("is_read")
  readAt           DateTime?        @map("read_at") @db.Timestamptz(6)
  pushSent         Boolean          @default(false) @map("push_sent")
  pushSentAt       DateTime?        @map("push_sent_at") @db.Timestamptz(6)
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user     Profile   @relation(fields: [userId], references: [id], onDelete: Cascade)
  farm     Farm      @relation(fields: [farmId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

// Push notification subscriptions
model PushSubscription {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  endpoint    String
  p256dhKey   String    @map("p256dh_key")
  authKey     String    @map("auth_key")
  userAgent   String?   @map("user_agent")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  lastUsedAt  DateTime  @default(now()) @map("last_used_at") @db.Timestamptz(6)

  // Relations
  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

// Enums
enum Role {
  OWNER
  MEMBER

  @@map("role")
}

enum InvitationStatus {
  PENDING
  ACTIVE
  DECLINED
  REMOVED

  @@map("invitation_status")
}

enum AnimalType {
  BUFFALO
  CHICKEN
  COW
  PIG
  HORSE

  @@map("animal_type")
}

enum Sex {
  MALE
  FEMALE

  @@map("sex")
}

enum AnimalStatus {
  ACTIVE
  SOLD
  DECEASED
  TRANSFERRED

  @@map("animal_status")
}

enum ActivityStatus {
  PENDING
  COMPLETED
  CANCELLED
  OVERDUE

  @@map("activity_status")
}

enum NotificationType {
  REMINDER
  SYSTEM
  ACTIVITY_UPDATE

  @@map("notification_type")
}