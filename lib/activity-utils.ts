import { format } from 'date-fns'

export interface ActivityType {
  id: string
  name: string
  usage: number
  lastUsed: Date
}

export interface ActivityFormData {
  title: string
  description?: string
  activityDate: string
  reminderDate?: string
  animalId: string
  farmId: string
}

// LocalStorage key for activity types
const ACTIVITY_TYPES_KEY = 'jaothui-activity-types'

/**
 * Get activity types from localStorage
 */
export function getActivityTypes(): ActivityType[] {
  if (typeof window === 'undefined') return []
  
  try {
    const stored = localStorage.getItem(ACTIVITY_TYPES_KEY)
    if (!stored) return []
    
    const types = JSON.parse(stored) as ActivityType[]
    return types.sort((a, b) => b.usage - a.usage || new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime())
  } catch (error) {
    console.error('Error loading activity types:', error)
    return []
  }
}

/**
 * Save activity type to localStorage
 */
export function saveActivityType(typeName: string): void {
  if (typeof window === 'undefined') return
  
  try {
    const currentTypes = getActivityTypes()
    const existingType = currentTypes.find(t => t.name.toLowerCase() === typeName.toLowerCase())
    
    if (existingType) {
      // Update existing type
      existingType.usage += 1
      existingType.lastUsed = new Date()
    } else {
      // Add new type
      currentTypes.push({
        id: generateActivityTypeId(),
        name: typeName,
        usage: 1,
        lastUsed: new Date()
      })
    }
    
    // Keep only top 20 most used types
    const sortedTypes = currentTypes
      .sort((a, b) => b.usage - a.usage || new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime())
      .slice(0, 20)
    
    localStorage.setItem(ACTIVITY_TYPES_KEY, JSON.stringify(sortedTypes))
  } catch (error) {
    console.error('Error saving activity type:', error)
  }
}

/**
 * Generate unique ID for activity type
 */
function generateActivityTypeId(): string {
  return `at_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`
}

/**
 * Get activity type suggestions based on input
 */
export function getActivityTypeSuggestions(input: string): string[] {
  if (!input.trim()) return []
  
  const types = getActivityTypes()
  const searchTerm = input.toLowerCase()
  
  return types
    .filter(type => type.name.toLowerCase().includes(searchTerm))
    .slice(0, 5)
    .map(type => type.name)
}

/**
 * Get popular activity types (top 10)
 */
export function getPopularActivityTypes(): string[] {
  const types = getActivityTypes()
  return types.slice(0, 10).map(type => type.name)
}

/**
 * Format activity date for API
 */
export function formatActivityDate(date: string): string {
  return format(new Date(date), 'yyyy-MM-dd')
}

/**
 * Format activity date for display
 */
export function formatActivityDateDisplay(date: string | Date): string {
  return format(new Date(date), 'dd/MM/yyyy')
}

/**
 * Check if reminder date is in the past
 */
export function isReminderOverdue(reminderDate: string | Date): boolean {
  const today = new Date()
  today.setHours(0, 0, 0, 0)
  
  const reminder = new Date(reminderDate)
  reminder.setHours(0, 0, 0, 0)
  
  return reminder < today
}

/**
 * Get activity status display text
 */
export function getActivityStatusDisplay(status: string): string {
  const statusMap: Record<string, string> = {
    'PENDING': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    'IN_PROGRESS': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    'COMPLETED': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    'OVERDUE': '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
  }
  
  return statusMap[status] || status
}

/**
 * Get activity status color
 */
export function getActivityStatusColor(status: string): string {
  const colorMap: Record<string, string> = {
    'PENDING': '#f39c12',
    'IN_PROGRESS': '#3498db',
    'COMPLETED': '#2ecc71',
    'CANCELLED': '#95a5a6',
    'OVERDUE': '#e74c3c'
  }
  
  return colorMap[status] || '#f39c12'
}

/**
 * Activity type icons following UI-GUIDELINES.md emoji-based system
 */
const ACTIVITY_TYPE_ICONS = {
  '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': 'üè•',
  '‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£': 'ü•¨',
  '‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô': 'üíâ',
  '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î': 'üßΩ',
  '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢': 'üèÉ',
  '‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥': 'üöø',
  '‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï': 'üìè',
  '‡∏ú‡∏™‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå': '‚ù§Ô∏è',
  '‡∏Ñ‡∏•‡∏≠‡∏î‡∏•‡∏π‡∏Å': 'üê£',
  '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ': '‚öïÔ∏è',
  '‡∏ï‡∏±‡∏î‡∏Ç‡∏ô': '‚úÇÔ∏è',
  '‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏ö': 'üíÖ',
  '‡∏ù‡∏∂‡∏Å‡∏ß‡∏¥‡∏ô‡∏±‡∏¢': 'üéØ',
  '‡∏Ç‡∏≤‡∏¢': 'üí∞',
  '‡∏ã‡∏∑‡πâ‡∏≠': 'üõí',
  'default': 'üìù'
} as const;

/**
 * Get activity type icon based on activity title
 */
export function getActivityTypeIcon(title: string): string {
  // Check exact matches first
  for (const [key, icon] of Object.entries(ACTIVITY_TYPE_ICONS)) {
    if (key !== 'default' && title.includes(key)) {
      return icon;
    }
  }
  
  // Check for common keywords
  const lowerTitle = title.toLowerCase();
  
  if (lowerTitle.includes('‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û') || lowerTitle.includes('‡∏ï‡∏£‡∏ß‡∏à')) {
    return ACTIVITY_TYPE_ICONS['‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'];
  }
  if (lowerTitle.includes('‡∏≠‡∏≤‡∏´‡∏≤‡∏£') || lowerTitle.includes('‡πÉ‡∏´‡πâ') || lowerTitle.includes('‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á')) {
    return ACTIVITY_TYPE_ICONS['‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£'];
  }
  if (lowerTitle.includes('‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô') || lowerTitle.includes('‡∏â‡∏µ‡∏î')) {
    return ACTIVITY_TYPE_ICONS['‡∏â‡∏µ‡∏î‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô'];
  }
  if (lowerTitle.includes('‡∏™‡∏∞‡∏≠‡∏≤‡∏î') || lowerTitle.includes('‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°')) {
    return ACTIVITY_TYPE_ICONS['‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î'];
  }
  if (lowerTitle.includes('‡∏Å‡∏≥‡∏•‡∏±‡∏á') || lowerTitle.includes('‡∏≠‡∏≠‡∏Å') || lowerTitle.includes('‡∏ß‡∏¥‡πà‡∏á')) {
    return ACTIVITY_TYPE_ICONS['‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'];
  }
  if (lowerTitle.includes('‡∏≠‡∏≤‡∏ö') || lowerTitle.includes('‡∏ô‡πâ‡∏≥')) {
    return ACTIVITY_TYPE_ICONS['‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥'];
  }
  if (lowerTitle.includes('‡πÄ‡∏à‡∏£‡∏¥‡∏ç') || lowerTitle.includes('‡∏ß‡∏±‡∏î') || lowerTitle.includes('‡∏ô‡∏¥‡πâ‡∏ß')) {
    return ACTIVITY_TYPE_ICONS['‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï'];
  }
  if (lowerTitle.includes('‡∏ú‡∏™‡∏°') || lowerTitle.includes('‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå')) {
    return ACTIVITY_TYPE_ICONS['‡∏ú‡∏™‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå'];
  }
  if (lowerTitle.includes('‡∏Ñ‡∏•‡∏≠‡∏î') || lowerTitle.includes('‡∏•‡∏π‡∏Å') || lowerTitle.includes('‡πÄ‡∏Å‡∏¥‡∏î')) {
    return ACTIVITY_TYPE_ICONS['‡∏Ñ‡∏•‡∏≠‡∏î‡∏•‡∏π‡∏Å'];
  }
  if (lowerTitle.includes('‡∏£‡∏±‡∏Å‡∏©‡∏≤') || lowerTitle.includes('‡πÇ‡∏£‡∏Ñ') || lowerTitle.includes('‡∏¢‡∏≤')) {
    return ACTIVITY_TYPE_ICONS['‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ'];
  }
  if (lowerTitle.includes('‡∏ï‡∏±‡∏î') && lowerTitle.includes('‡∏Ç‡∏ô')) {
    return ACTIVITY_TYPE_ICONS['‡∏ï‡∏±‡∏î‡∏Ç‡∏ô'];
  }
  if (lowerTitle.includes('‡∏ï‡∏±‡∏î') && lowerTitle.includes('‡πÄ‡∏•‡πá‡∏ö')) {
    return ACTIVITY_TYPE_ICONS['‡∏ï‡∏±‡∏î‡πÄ‡∏•‡πá‡∏ö'];
  }
  if (lowerTitle.includes('‡∏ù‡∏∂‡∏Å') || lowerTitle.includes('‡∏ß‡∏¥‡∏ô‡∏±‡∏¢')) {
    return ACTIVITY_TYPE_ICONS['‡∏ù‡∏∂‡∏Å‡∏ß‡∏¥‡∏ô‡∏±‡∏¢'];
  }
  if (lowerTitle.includes('‡∏Ç‡∏≤‡∏¢')) {
    return ACTIVITY_TYPE_ICONS['‡∏Ç‡∏≤‡∏¢'];
  }
  if (lowerTitle.includes('‡∏ã‡∏∑‡πâ‡∏≠')) {
    return ACTIVITY_TYPE_ICONS['‡∏ã‡∏∑‡πâ‡∏≠'];
  }
  
  return ACTIVITY_TYPE_ICONS.default;
}

/**
 * Status colors following UI-GUIDELINES.md color system
 */
const STATUS_COLORS = {
  PENDING: '#f1c40f',    // Yellow
  IN_PROGRESS: '#3498db', // Blue
  COMPLETED: '#2ecc71',  // Green
  CANCELLED: '#e74c3c',  // Red
  OVERDUE: '#e67e22'     // Orange
} as const;

/**
 * Get activity status color (enhanced version)
 */
export function getActivityStatusColorEnhanced(status: string): string {
  return STATUS_COLORS[status as keyof typeof STATUS_COLORS] || STATUS_COLORS.PENDING;
}

/**
 * Get status badge class name for styling
 */
export function getActivityStatusBadgeClass(status: string): string {
  const classMap: Record<string, string> = {
    'PENDING': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    'IN_PROGRESS': 'bg-blue-100 text-blue-800 border-blue-200',
    'COMPLETED': 'bg-green-100 text-green-800 border-green-200',
    'CANCELLED': 'bg-red-100 text-red-800 border-red-200',
    'OVERDUE': 'bg-orange-100 text-orange-800 border-orange-200'
  };
  
  return classMap[status] || classMap.PENDING;
}

/**
 * Validate activity form data
 */
export function validateActivityForm(data: ActivityFormData): string[] {
  const errors: string[] = []
  
  if (!data.title.trim()) {
    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°')
  }
  
  if (data.title.length > 100) {
    errors.push('‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
  }
  
  if (data.description && data.description.length > 500) {
    errors.push('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
  }
  
  if (!data.activityDate) {
    errors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°')
  }
  
  if (data.reminderDate && data.activityDate) {
    const activityDate = new Date(data.activityDate)
    const reminderDate = new Date(data.reminderDate)
    
    if (reminderDate > activityDate) {
      errors.push('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°')
    }
  }
  
  return errors
}